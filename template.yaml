AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploying NestJS application to AWS Lambda with API Gateway and Lambda Layer

Resources:
  # Lambda Function
  NestJsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: src/main.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
      Layers:
        - !Ref DependenciesLayer
      Events:
        DefaultRoute:
          Type: Api
          Properties:
            RestApiId: !Ref NestJsApiGateway
            Path: /
            Method: ANY
        ProxyRoute:
          Type: Api
          Properties:
            RestApiId: !Ref NestJsApiGateway
            Path: /{proxy+}
            Method: ANY

  # Lambda Layer
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DependenciesLayer
      Description: Contains dependencies for the NestJS application
      ContentUri: ./lambda-layer/layer.zip
      CompatibleRuntimes:
        - nodejs18.x

  # API Gateway
  NestJsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: "NestJsApiGateway-${AWS::StackName}"
      StageName: Prod
      ApiKeySourceType: HEADER
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "NestJs API"
          description: "API Gateway for NestJs application"
          version: "1.0"
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              responses:
                default:
                  description: "Default response for /"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
                  - { LambdaFunctionArn: !GetAtt NestJsLambdaFunction.Arn }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              responses:
                default:
                  description: "Default response for /{proxy+}"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
                  - { LambdaFunctionArn: !GetAtt NestJsLambdaFunction.Arn }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

  # Deployment Resource
  NestJsApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref NestJsApiGateway
    DependsOn:  
      - NestJsLambdaFunction

  # API Key
  NestJsApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: NestJsApiKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref NestJsApiGateway
          StageName: Prod
    DependsOn:
      - NestJsApiGatewayDeployment

  # Usage Plan
  NestJsUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: NestJsUsagePlan
      ApiStages:
        - ApiId: !Ref NestJsApiGateway
          Stage: Prod
      Throttle:
        RateLimit: 1000
        BurstLimit: 200
      Quota:
        Limit: 10000
        Period: MONTH

  # Usage Plan Key
  NestJsUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref NestJsApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref NestJsUsagePlan