name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Debug build output
      - name: Debug Build Output
        run: |
          echo "Inspecting build output..."
          ls -R dist
          if [ ! -f dist/src/main.js ]; then
            echo "Error: main.js not found in dist directory. Check build configuration."
            exit 1
          fi

      # Step 6: Prepare Lambda Layer
      - name: Create Lambda Layer
        run: |
          mkdir -p lambda-layer/nodejs
          cp package.json package-lock.json lambda-layer/nodejs/
          cd lambda-layer/nodejs
          npm install --only=prod
          cd ..
          zip -r layer.zip nodejs
          cd ../..

      # Step 7: Install AWS SAM CLI
      - name: Install AWS SAM CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip curl
          curl -Lo aws-sam-cli.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip aws-sam-cli.zip -d sam-installation
          sudo ./sam-installation/install --update

      # Step 8: Build with AWS SAM
      - name: Build with SAM
        run: |
          sam build
          echo "Inspecting SAM build artifacts..."
          ls -R .aws-sam/build
          if [ ! -f .aws-sam/build/NestJsLambdaFunction/src/main.js ]; then
            echo "Error: main.js not found in SAM artifacts. Check SAM template configuration."
            exit 1
          fi

      # Step 9: Check and Delete ROLLBACK_COMPLETE Stack
      - name: Check and Delete ROLLBACK_COMPLETE Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-southeast-1
        run: |
          STACK_NAME=study-english
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text --region $AWS_REGION || echo "DOES_NOT_EXIST")
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting..."
            aws cloudformation delete-stack --stack-name $STACK_NAME --region $AWS_REGION
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --region $AWS_REGION
          elif [ "$STACK_STATUS" = "DOES_NOT_EXIST" ]; then
            echo "Stack does not exist. Proceeding with deployment."
          else
            echo "Stack is in $STACK_STATUS state. Proceeding with deployment."
          fi

      # Step 10: Deploy with AWS SAM
      - name: Deploy with SAM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-southeast-1
        run: |
          sam deploy \
            --stack-name study-english \
            --capabilities CAPABILITY_IAM \
            --region ap-southeast-1 \
            --s3-bucket study-english

      # Step 11: Capture CloudFormation Events
      - name: Capture CloudFormation Events
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-southeast-1
        run: |
          aws cloudformation describe-stack-events \
            --stack-name study-english \
            --region ap-southeast-1 \
            --output table