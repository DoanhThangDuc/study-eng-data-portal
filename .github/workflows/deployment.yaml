name: "staging-deployment"

on: 
  push: 
    branches: 
      - 'main'

  workflow_run:
    workflows:
      - "integration-testing"
    types: 
      - completed

jobs:
  deploy_to_staging:
    runs-on: ubuntu-latest
    environment: staging  # Use the staging environment for secrets

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Debug Build Output
      - name: Debug Build Output
        run: |
          echo "Inspecting build output..."
          ls -R dist
          if [ ! -f dist/src/main.js ]; then
            echo "Error: main.js not found in dist directory. Check build configuration."
            exit 1
          fi

      # Step 6: Add EC2 instance to known hosts
      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "Adding EC2 instance to known hosts..."
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts
          # Debug known hosts
          echo "Known hosts after ssh-keyscan:"
          cat ~/.ssh/known_hosts

      # Step 7: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Temporarily using GitHub Secrets for AWS CLI access
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 8: Fetch all secrets and update .env file
      - name: Fetch all secrets and update .env
        id: update-env
        run: |
          # Fetch all secret names from AWS Secrets Manager
          secret_names=$(aws secretsmanager list-secrets --query "SecretList[].Name" --output text)

          # Loop through each secret name and fetch its value
          for secret_name in $secret_names; do
            secret_value=$(aws secretsmanager get-secret-value --secret-id $secret_name --query SecretString --output text)
            # Extract the secret key name from the secret name
            secret_key=$(basename $secret_name)
            # Replace or append the secret key-value pair in the .env file
            if grep -q "^$secret_key=" .env; then
              # Update existing key
              sed -i "s|^$secret_key=.*|$secret_key=$secret_value|" .env
            else
              # Add new key
              echo "$secret_key=$secret_value" >> .env
            fi
          done

      # Step 9: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          echo "$AWS_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          if [ ! -f private_key.pem ]; then
            echo "Private key file not found!"
            exit 1
          fi

          # Debug SSH connection details
          echo "Attempting SSH connection to EC2..."
          echo "AWS_HOST: ${{ secrets.AWS_HOST }}"
          echo "AWS_USERNAME: $AWS_USERNAME"

          echo "Deploying to EC2 instance..."
          # Transfer the build, .env file, and other necessary files to EC2
          scp -i private_key.pem -r dist package.json package-lock.json .env $AWS_USERNAME@$AWS_HOST:/home/ec2-user/study_english_data_portal

          # SSH to EC2 to restart services
          ssh -i private_key.pem $AWS_USERNAME@$AWS_HOST << 'EOF'
            cd /home/ec2-user/study_english_data_portal
            npm ci --omit=dev
            pm2 restart all || pm2 start "npm run start:staging" --name "study_english_data_portal"
            exit
          EOF

          echo "Deployment completed successfully."

      # Step 10: Clean up private key
      - name: Clean up private key
        run: rm -f private_key.pem