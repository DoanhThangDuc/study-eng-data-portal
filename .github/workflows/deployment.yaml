name: "staging-deployment"

on: 
  push: 
    branches: 
      - 'main'

  workflow_run:
    workflows:
      - "integration-testing"
    types: 
      - completed

jobs:
  deploy_to_staging:
    runs-on: ubuntu-latest
    environment: staging  # Use the staging environment for secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: Debug Build Output
        run: |
          echo "Inspecting build output..."
          ls -R dist
          [[ -f dist/src/main.js ]] || { echo "Error: main.js not found in dist directory."; exit 1; }

      - name: Add EC2 instance to known hosts
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch all secrets and update .env
        id: update-env
        run: |
          secret_names=$(aws secretsmanager list-secrets --query "SecretList[].Name" --output text)
          for secret_name in $secret_names; do
            secret_value=$(aws secretsmanager get-secret-value --secret-id $secret_name --query SecretString --output text)
            if echo "$secret_value" | jq -e . >/dev/null 2>&1; then
              echo "$secret_value" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read -r line; do
                key=$(echo "$line" | cut -d '=' -f 1)
                value=$(echo "$line" | cut -d '=' -f 2-)
                grep -q "^$key=" .env && sed -i "s|^$key=.*|$key=$value|" .env || echo "$line" >> .env
              done
            else
              secret_key=$(basename "$secret_name")
              grep -q "^$secret_key=" .env && sed -i "s|^$secret_key=.*|$secret_key=$secret_value|" .env || echo "$secret_key=$secret_value" >> .env
            fi
          done

      - name: Deploy to AWS EC2
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          [[ -f private_key.pem ]] || { echo "Private key file not found!"; exit 1; }
      
          echo "Deploying to EC2 instance..."
          scp -i private_key.pem -r dist package.json package-lock.json .env ec2-user@${{ secrets.AWS_HOST }}:/home/ec2-user/study_english_data_portal
      
          ssh -i private_key.pem ec2-user@${{ secrets.AWS_HOST }} << 'EOF'
            set -e  # Exit on error
            cd /home/ec2-user/study_english_data_portal
      
            # Ensure all dependencies are installed
            npm install --legacy-peer-deps  
      
            echo "Running database migrations..."
            npm run migrate:staging:latest
          
            pm2 restart all || pm2 start "npm run start:staging" --name "study_english_data_portal"
          EOF
        
          echo "Deployment completed successfully."

      - name: Clean up private key
        run: rm -f private_key.pem